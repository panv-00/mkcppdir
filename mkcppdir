#!/usr/bin/bash

if [ "$#" -eq 0 ]
then
  echo "Usage:"
  echo "mkcppdir -n name -c class1 -c class2 ... -h header1 -h header2 ..."
  echo "  - name    => project & main cpp file name."
  echo "  - classes => .cpp and .h class files."
  echo "  - headers => only .h header class files."

  exit 1
fi

while getopts "n:c:h:" opt; do
    case $opt in
        n) main="$OPTARG";;
        c) classes+=("$OPTARG");;
        h) headers+=("$OPTARG");;
    esac
done

if [ -d "$PWD/$main" ]
then
  echo "Directory $main exists. Cannot continue!"

  exit 1
fi

echo "Creating project directory $main.."
mkdir "$PWD/$main"
mkdir "$PWD/$main/build"
mkdir "$PWD/$main/src"

touch "$PWD/$main/Makefile"
echo "default:" >> "$PWD/$main/Makefile"
echo $'\t'"@+make -C build" >> "$PWD/$main/Makefile"
echo "" >> "$PWD/$main/Makefile"
echo "clean:" >> "$PWD/$main/Makefile"
echo $'\t'"@rm -f build/*.o" >> "$PWD/$main/Makefile"
echo $'\t'"@rm -f $main" >> "$PWD/$main/Makefile"
echo $'\t'"@echo \"Clean!\"" >> "$PWD/$main/Makefile"

touch "$PWD/$main/build/Makefile"
echo "CPP=g++" >> "$PWD/$main/build/Makefile"
echo "PKGS=" >> "$PWD/$main/build/Makefile"
echo "CFLAGS=-Wall -O3 -g" >> "$PWD/$main/build/Makefile"
echo "LIBS=" >> "$PWD/$main/build/Makefile"
echo "VPATH=../src" >> "$PWD/$main/build/Makefile"
echo "" >> "$PWD/$main/build/Makefile"
echo "OBJECTS= \\" >> "$PWD/$main/build/Makefile"

touch "$PWD/$main/src/$main.cpp"

for val in "${headers[@]}"; do

  echo "Adding Header: $val.h"

  touch "$PWD/$main/src/$val.h"
  tmph="$val""_h"
  tu_h=$(echo $tmph | tr '[:lower:]' '[:upper:]')
  echo "#ifndef $tu_h" >> "$PWD/$main/src/$val.h"
  echo "#define $tu_h" >> "$PWD/$main/src/$val.h"
  echo "" >> "$PWD/$main/src/$val.h"
  echo "#include <stdio.h>" >> "$PWD/$main/src/$val.h"
  echo "" >> "$PWD/$main/src/$val.h"
  echo "class $val" >> "$PWD/$main/src/$val.h"
  echo "{" >> "$PWD/$main/src/$val.h"
  echo "public:" >> "$PWD/$main/src/$val.h"
  echo "  $val""()" >> "$PWD/$main/src/$val.h"
  echo "  {" >> "$PWD/$main/src/$val.h"
  echo "" >> "$PWD/$main/src/$val.h"
  echo "  };" >> "$PWD/$main/src/$val.h"
  echo "" >> "$PWD/$main/src/$val.h"
  echo "  ~$val""()" >> "$PWD/$main/src/$val.h"
  echo "  {" >> "$PWD/$main/src/$val.h"
  echo "" >> "$PWD/$main/src/$val.h"
  echo "  };" >> "$PWD/$main/src/$val.h"
  echo "" >> "$PWD/$main/src/$val.h"
  echo "protected:" >> "$PWD/$main/src/$val.h"
  echo "" >> "$PWD/$main/src/$val.h"
  echo "private:" >> "$PWD/$main/src/$val.h"
  echo "" >> "$PWD/$main/src/$val.h"
  echo "};" >> "$PWD/$main/src/$val.h"
  echo "" >> "$PWD/$main/src/$val.h"
  echo "#endif" >> "$PWD/$main/src/$val.h"

  echo "#include \"$val.h\"" >> "$PWD/$main/src/$main.cpp"

done

for val in "${classes[@]}"; do
  echo "Adding class: $val.cpp and its header $val.h"

  touch "$PWD/$main/src/$val.h"
  tmph="$val""_h"
  tu_h=$(echo $tmph | tr '[:lower:]' '[:upper:]')
  echo "#ifndef $tu_h" >> "$PWD/$main/src/$val.h"
  echo "#define $tu_h" >> "$PWD/$main/src/$val.h"
  echo "" >> "$PWD/$main/src/$val.h"
  echo "#include <stdio.h>" >> "$PWD/$main/src/$val.h"
  echo "" >> "$PWD/$main/src/$val.h"
  echo "class $val" >> "$PWD/$main/src/$val.h"
  echo "{" >> "$PWD/$main/src/$val.h"
  echo "public:" >> "$PWD/$main/src/$val.h"
  echo "  $val""();" >> "$PWD/$main/src/$val.h"
  echo "  ~$val""();" >> "$PWD/$main/src/$val.h"
  echo "" >> "$PWD/$main/src/$val.h"
  echo "protected:" >> "$PWD/$main/src/$val.h"
  echo "" >> "$PWD/$main/src/$val.h"
  echo "private:" >> "$PWD/$main/src/$val.h"
  echo "" >> "$PWD/$main/src/$val.h"
  echo "};" >> "$PWD/$main/src/$val.h"
  echo "" >> "$PWD/$main/src/$val.h"
  echo "#endif" >> "$PWD/$main/src/$val.h"

  echo "#include \"$val.h\"" >> "$PWD/$main/src/$main.cpp"

  touch "$PWD/$main/src/$val.cpp"
  echo "#include \"$val.h\"" >> "$PWD/$main/src/$val.cpp"
  echo "" >> "$PWD/$main/src/$val.cpp"
  echo "$val::$val()" >> "$PWD/$main/src/$val.cpp"
  echo "{" >> "$PWD/$main/src/$val.cpp"
  echo "" >> "$PWD/$main/src/$val.cpp"
  echo "}" >> "$PWD/$main/src/$val.cpp"
  echo "" >> "$PWD/$main/src/$val.cpp"
  echo "$val::~$val()" >> "$PWD/$main/src/$val.cpp"
  echo "{" >> "$PWD/$main/src/$val.cpp"
  echo "" >> "$PWD/$main/src/$val.cpp"
  echo "}" >> "$PWD/$main/src/$val.cpp"
  
  echo $'\t'"$val.o \\" >> "$PWD/$main/build/Makefile"

done

echo "" >> "$PWD/$main/src/$main.cpp"
echo "int main(int argc, char *argv[])" >> "$PWD/$main/src/$main.cpp"
echo "{" >> "$PWD/$main/src/$main.cpp"
echo "" >> "$PWD/$main/src/$main.cpp"
echo "  return 0;" >> "$PWD/$main/src/$main.cpp"
echo "}" >> "$PWD/$main/src/$main.cpp"

echo "" >> "$PWD/$main/build/Makefile"
echo "DEPLIST= \\" >> "$PWD/$main/build/Makefile"
echo "" >> "$PWD/$main/build/Makefile"
echo "default: \$(OBJECTS)" >> "$PWD/$main/build/Makefile"
echo $'\t'"\$(CPP) -o ../$main ../src/$main.cpp \\" >> "$PWD/$main/build/Makefile"
echo $'\t'$'\t'"\$(OBJECTS) \\" >> "$PWD/$main/build/Makefile"
echo $'\t'$'\t'"\$(CFLAGS) \\" >> "$PWD/$main/build/Makefile"
echo $'\t'$'\t'"\$(LIBS)" >> "$PWD/$main/build/Makefile"
echo "" >> "$PWD/$main/build/Makefile"
echo "%.o: %.cpp %.h \$(DEPLIST)" >> "$PWD/$main/build/Makefile"
echo $'\t'"\$(CPP) -c \$< -o \$*.o \$(CFLAGS)" >> "$PWD/$main/build/Makefile"

